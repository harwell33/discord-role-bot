# === bot.py ===
import discord
from discord.ext import commands, tasks
from database import (
    init_db, add_role, get_active_roles, remove_role, 
    get_users_with_role, get_expired_roles, role_exists, 
    prolong_role, get_log_channel, set_log_channel  # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç get_log_channel
)
from datetime import datetime
import random
import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

# === Dropbox –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ===
import dropbox

def download_db():
    token = os.environ.get("DROPBOX_TOKEN")
    if not token:
        print("‚ùå DROPBOX_TOKEN not set")
        return

    dbx = dropbox.Dropbox(token)
    try:
        metadata, res = dbx.files_download("/roles.db")
        os.makedirs("data", exist_ok=True)
        with open("data/roles.db", "wb") as f:
            f.write(res.content)
        print("‚úÖ roles.db –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ Dropbox")
    except dropbox.exceptions.ApiError as e:
        print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ roles.db –∑ Dropbox:", e)

def upload_db():
    token = os.environ.get("DROPBOX_TOKEN")
    if not token:
        print("‚ùå DROPBOX_TOKEN not set")
        return

    dbx = dropbox.Dropbox(token)
    try:
        with open("data/roles.db", "rb") as f:
            dbx.files_upload(f.read(), "/roles.db", mode=dropbox.files.WriteMode.overwrite)
        print("‚úÖ roles.db –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É Dropbox")
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ roles.db —É Dropbox:", e)

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É ===
@bot.event
async def on_command_error(ctx, error):
    upload_db()
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚õî You need the 'Manage Roles' permission to use this command.")
    else:
        raise error

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–Ω—è—Ç—Ç—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–ª–µ–π ===
@tasks.loop(hours=24)
async def check_expired_roles():
    expired = get_expired_roles()
    guild = discord.utils.get(bot.guilds)
    for user_id, role_id in expired:
        member = guild.get_member(user_id)
        role = guild.get_role(role_id)
        if member and role:
            await member.remove_roles(role)
            remove_role(user_id, role_id)
            log_channel_id = get_log_channel(guild.id)
            if log_channel_id:
                log_channel = guild.get_channel(log_channel_id)
                if log_channel:
                    await log_channel.send(f"‚è∞ Auto-removed `{role.name}` from {member.mention} (expired)")
            print(f"[AUTO] Removed role '{role.name}' from '{member.display_name}' (expired)")

@bot.event
async def on_ready():
    download_db()
    os.makedirs("data", exist_ok=True)
    init_db()
    check_expired_roles.start()
    print(f'Bot {bot.user} is now running!')
    for guild in bot.guilds:
        print(f'Connected to server: {guild.name} (ID: {guild.id})')

# === –ö–æ–º–∞–Ω–¥–∞ /assign ‚Äî –≤–∏–¥–∞—Ç–∏ —Ä–æ–ª—å –∑ —Ç–µ—Ä–º—ñ–Ω–æ–º –¥—ñ—ó ===
@bot.command()
@commands.has_permissions(manage_roles=True)
async def assign(ctx, member: discord.Member, role: discord.Role, days: int = None):
    if role_exists(member.id, role.id):
        await ctx.send(f"‚ö†Ô∏è {member.display_name} already has the role `{role.name}` tracked by the bot.")
        return

    await member.add_roles(role)
    add_role(user_id=member.id, role_id=role.id, days=days, assigned_by=ctx.author.id)
    upload_db()
    log_channel_id = get_log_channel(ctx.guild.id)
    if log_channel_id:
        log_channel = ctx.guild.get_channel(log_channel_id)
        if log_channel:
            await log_channel.send(f"‚úÖ {ctx.author.mention} assigned `{role.name}` to {member.mention}" + (f" for {days}d." if days else "."))
    await ctx.send(f"‚úÖ Role `{role.name}` has been assigned to {member.display_name}" + (f" for {days} days." if days else "."))

# === –ö–æ–º–∞–Ω–¥–∞ /remove ‚Äî –∑–Ω—è—Ç–∏ —Ä–æ–ª—å ===
@bot.command()
@commands.has_permissions(manage_roles=True)
async def remove(ctx, member: discord.Member, role: discord.Role):
    await member.remove_roles(role)
    remove_role(member.id, role.id)
    upload_db()
    log_channel_id = get_log_channel(ctx.guild.id)
    if log_channel_id:
        log_channel = ctx.guild.get_channel(log_channel_id)
        if log_channel:
            await log_channel.send(f"üóëÔ∏è {ctx.author.mention} removed `{role.name}` from {member.mention}")
    await ctx.send(f"üóëÔ∏è Role `{role.name}` has been removed from {member.display_name}.")

# === –ö–æ–º–∞–Ω–¥–∞ /prolong ‚Äî –ø–æ–¥–æ–≤–∂–∏—Ç–∏ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ä–æ–ª—ñ ===
@bot.command()
@commands.has_permissions(manage_roles=True)
async def prolong(ctx, member: discord.Member, role: discord.Role, days: int):
    if not role_exists(member.id, role.id):
        await ctx.send(f"‚ö†Ô∏è Role `{role.name}` is not tracked for {member.display_name}.")
        return

    prolong_role(member.id, role.id, days)
    upload_db()  # –î–æ–¥–∞–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    log_channel_id = get_log_channel(ctx.guild.id)
    if log_channel_id:
        log_channel = ctx.guild.get_channel(log_channel_id)
        if log_channel:
            await log_channel.send(f"üîÅ {ctx.author.mention} prolonged `{role.name}` for {member.mention} by {days}d")
    await ctx.send(f"üîÅ Role `{role.name}` for {member.display_name} has been extended by {days} days.")

# === –ö–æ–º–∞–Ω–¥–∞ /myroles ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
@bot.command()
async def myroles(ctx):
    user_roles = get_active_roles(ctx.author.id)
    if not user_roles:
        await ctx.send("üì≠ You have no active roles assigned by the bot.")
        return

    lines = []
    for role_id, expires_at in user_roles:
        role = ctx.guild.get_role(role_id)
        if not role:
            continue
        if expires_at:
            try:
                delta = datetime.fromisoformat(expires_at) - datetime.utcnow()
                days = delta.days
                hours, remainder = divmod(delta.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                lines.append(f"‚Ä¢ `{role.name}` ‚Äî {days}d {hours}h {minutes}m {seconds}s left")
            except ValueError:
                lines.append(f"‚Ä¢ `{role.name}` ‚Äî error in date")
        else:
            lines.append(f"‚Ä¢ `{role.name}` ‚Äî permanent")

    await ctx.send("üßæ Your active roles:\n" + "\n".join(lines))

# === –ö–æ–º–∞–Ω–¥–∞ /list ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é ===
@bot.command()
@commands.has_permissions(manage_roles=True)
async def list(ctx, role: discord.Role):
    users = get_users_with_role(role.id)
    if not users:
        await ctx.send(f"üì≠ No users have the role `{role.name}`.")
        return

    lines = []
    for user_id, expires_at in users:
        member = ctx.guild.get_member(user_id)
        if not member:
            continue
        if expires_at:
            try:
                delta = datetime.fromisoformat(expires_at) - datetime.utcnow()
                days = delta.days
                hours, remainder = divmod(delta.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                lines.append(f"‚Ä¢ {member.display_name} ‚Äî {days}d {hours}h {minutes}m {seconds}s left")
            except ValueError:
                lines.append(f"‚Ä¢ {member.display_name} ‚Äî error in date")
        else:
            lines.append(f"‚Ä¢ {member.display_name} ‚Äî permanent")

    await ctx.send(f"üìã Users with role `{role.name}`:\n" + "\n".join(lines))

# === –ö–æ–º–∞–Ω–¥–∞ /randomrole ‚Äî –≤–∏–¥–∞—Ç–∏ —Ä–æ–ª—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —É—á–∞—Å–Ω–∏–∫–∞–º ===
@bot.command()
@commands.has_permissions(manage_roles=True)
async def randomrole(ctx, role: discord.Role, days: int, amount: int):
    eligible_members = [
        m for m in ctx.guild.members
        if not m.bot and not role_exists(m.id, role.id) and role not in m.roles
    ]

    if len(eligible_members) < amount:
        await ctx.send(f"‚ö†Ô∏è Not enough eligible members. Found only {len(eligible_members)}.")
        return

    selected = random.sample(eligible_members, amount)
    for member in selected:
        await member.add_roles(role)
        add_role(member.id, role.id, days=days, assigned_by=ctx.author.id)
    
    upload_db()  # –î–æ–¥–∞–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    mentions = ", ".join(m.mention for m in selected)
    await ctx.send(f"üé≤ Assigned role `{role.name}` for {days} days to: {mentions}")

# === –ö–æ–º–∞–Ω–¥–∞ /logchannel ‚Äî –∑–∞–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥—ñ–≤ ===
@bot.command()
@commands.has_permissions(manage_guild=True)
async def logchannel(ctx, channel: discord.TextChannel):
    set_log_channel(ctx.guild.id, channel.id)
    await ctx.send(f"üìì Log channel set to {channel.mention}")

# === –ö–æ–º–∞–Ω–¥–∞ /expires ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π, —â–æ —Å–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è ===
@bot.command()
@commands.has_permissions(manage_roles=True)
async def expires(ctx):
    all_data = []
    for member in ctx.guild.members:
        if member.bot:
            continue
        roles = get_active_roles(member.id)
        for role_id, expires_at in roles:
            if expires_at:
                try:
                    delta = datetime.fromisoformat(expires_at) - datetime.utcnow()
                    days = delta.days
                    hours, remainder = divmod(delta.seconds, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    if delta.total_seconds() > 0:
                        role = ctx.guild.get_role(role_id)
                        if role:
                            all_data.append(f"‚Ä¢ {member.display_name} ‚Äî `{role.name}` expires in {days}d {hours}h {minutes}m {seconds}s")
                except Exception:
                    continue
    if all_data:
        await ctx.send("‚è≥ Expiring roles:\n" + "\n".join(all_data))
    else:
        await ctx.send("‚úÖ No expiring roles found.")

# === –ö–æ–º–∞–Ω–¥–∞ /disablelog ‚Äî –ø—Ä–∏–±—Ä–∞—Ç–∏ –ª–æ–≥-–∫–∞–Ω–∞–ª ===
@bot.command()
@commands.has_permissions(manage_guild=True)
async def disablelog(ctx):
    set_log_channel(ctx.guild.id, None)
    await ctx.send("üìµ Log channel disabled.")

# === /help ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ ===
@bot.command()
async def help(ctx):
    help_text = (
        "üõ† **Available Commands:**\n"
        "`!assign @user @role [days]` ‚Äî assign a role optionally with duration\n"
        "`!remove @user @role` ‚Äî remove a role\n"
        "`!prolong @user @role days` ‚Äî extend role duration\n"
        "`!myroles` ‚Äî show your active roles\n"
        "`!list @role` ‚Äî list users with this role\n"
        "`!randomrole @role days count` ‚Äî randomly assign a role to users\n"
        "`!logchannel #channel` ‚Äî set log channel for role actions\n"
        "`!disablelog` ‚Äî disable log channel\n"
        "`!expires` ‚Äî list roles that are about to expire\n"
    )
    await ctx.send(help_text)

# === –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render ===
class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')

def run_web_server():
    port = int(os.environ.get("PORT", 3000))
    server = HTTPServer(("", port), SimpleHandler)
    server.serve_forever()

threading.Thread(target=run_web_server, daemon=True).start()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
TOKEN = os.environ.get("DISCORD_TOKEN")
if not TOKEN:
    print("‚ùå Discord token not found. Set the DISCORD_TOKEN environment variable.")
else:
    bot.run(TOKEN)
